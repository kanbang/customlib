#include "computer.h"

computer::computer()
{
}

void computer::registerTypes()
{
    /**
         通用寄存器
        有8个, 又可以分成2组，一组是数据寄存器(4个),另一组是指针寄存器及变址寄存器(4个).
        顾名思义，通用寄存器是那些你可以根据自己的意愿使用的寄存器，修改他们的值通常不会对计算机的运行造成很大的影响。
        数据寄存器分为：
        AH&AL=AX(accumulator)：累加寄存器，常用于运算;在乘除等指令中指定用来存放操作数，另外,所有的I/O指令都使用这一寄存器与外界设备传送数据。
        BH&BL=BX(base)：基址寄存器，常用于地址索引
        CH&CL=CX(count)：计数寄存器，常用于计数；常用于保存计算值，如在移位指令,循环(loop)和串处理指令中用作隐含的计数器.
        寄存器 寄存器
        DH&DL=DX(data)：数据寄存器，常用于数据传递。
        他们的特点是，这4个16位的寄存器可以分为高8位: AH, BH, CH, DH.以及低八位：AL,BL,CL,DL。这2组8位寄存器可以分别寻址，并单独使用。

        另一组是指针寄存器和变址寄存器，包括：
        SP（Stack Pointer）：堆栈指针，与SS配合使用，可指向目前的堆栈位置
        BP（Base Pointer）：基址指针寄存器，可用作SS的一个相对基址位置
        SI（Source Index）：源变址寄存器，可用来存放相对于DS段之源变址指针
        DI（Destination Index）：目的变址寄存器，可用来存放相对于ES 段之目的变址指针。
        这4个16位寄存器只能按16位进行存取操作，主要用来形成操作数的地址，用于堆栈操作和变址运算中计算操作数的有效地址。

        指令指针IP
        指令指针IP是一个16位专用寄存器，它指向当前需要取出的指令字节，当BIU从内存中取出一个指令字节后，IP就自动加(取出该字节的长度，
        如：BIU从内存中取出的是1个字节，IP就会自动加1，如果BIU从内存中取出的字节数长度为3，IP就自动加3)，指向下一个指令字节。
        注意，IP指向的是指令地址的段内地址偏移量，又称偏移地址(Offset Address)或有效地址(EA，Effective Address)。
        标志寄存器
        8086有一个16位的标志性寄存器FR，在FR中有意义的有9位，其中6位是状态位，3位是控制位。
        标志寄存器（Flags Register,FR）又称程序状态字(Program Status Word,PSW)。这是一个存放条件标志、控制标志寄存器，
        主要用于反映处理器的状态和运算结果的某些特征及控制指令的执行。

        段寄存器
        为了运用所有的内存空间，8086设定了四个段寄存器，专门用来保存段地址：
        寄存器 寄存器
        CS（Code Segment）：代码段寄存器
        DS（Data Segment）：数据段寄存器
        SS（Stack Segment）：堆栈段寄存器
        ES（Extra Segment）：附加段寄存器。
        当一个程序要执行时，就要决定程序代码、数据和堆栈各要用到内存的哪些位置，
        通过设定段寄存器CS，DS，SS 来指向这些起始位置。通常是将DS固定，而根据需要修改CS。
        所以，程序可以在可寻址空间小于64K的情况下被写成任意大小。所以，程序和其数据组合起来的大小，
        限制在DS 所指的64K内，这就是COM文件不得大于64K的原因。8086以内存作为战场，用寄存器做为军事基地，以加速工作。
        备注：由于所讲的是16位cpu(IP寄存器的位数为16，即：偏移地址为16位)2的16次幂就是64K，
        所以16位段地址不能超过64K，超过64K会造成64K以上的地址找不到。

        通用寄存器
        顾名思义，通用寄存器是那些你可以根据自己的意愿使用的寄存
        通用寄存器 通用寄存器
        器，修改他们的值通常不会对计算机的运行造成很大的影响。通用寄存器最多的用途是计算。
        EAX：通用寄存器。相对其他寄存器，在进行运算方面比较常用。在保护模式中，也可以作为内存偏移指针（此时，DS作为段寄存器或选择器）
        EBX：通用寄存器。通常作为内存偏移指针使用（相对于EAX、ECX、EDX），DS是默认的段寄存器或选择器。在保护模式中，同样可以起这个作用。
        ECX：通用寄存器。通常用于特定指令的计数。在保护模式中，也可以作为内存偏移指针（此时，DS作为寄存器或段选择器）。
        EDX：通用寄存器。在某些运算中作为EAX的溢出寄存器（例如乘、除）。
        同AX分为AH&AL一样，上述寄存器包括对应的16-bit分组和8-bit分组。
        特殊寄存器
        ESI：通常在内存操作指令中作为“源地址指针”使用。当然，ESI可以被装入任意的数值，但通常没有人
        现金寄存器 现金寄存器
        把它当作通用寄存器来用。DS是默认段寄存器或选择器。
        EDI：通常在内存操作指令中作为“目的地址指针”使用。当然，EDI也可以被装入任意的数值，但通常没有人把它当作通用寄存器来用。
        ES是默认段寄存器或选择器。
        EBP和ESP：作为指针的寄存器，也可作为16位寄存器BP, SP使用，常用于椎栈操作。
        通常，它被高级语言编译器用以建造‘堆栈帧'来保存函数或过程的局部变量，不过，还是那句话，
        你可以在其中保存你希望的任何数据。SS是它的默认段寄存器或选择器。
        注意，这四个寄存器没有对应的8-bit分组。换言之，你可以通过SI、DI、BP、SP作为别名访问他们的低16位，却没有办法直接访问他们的低8位。
*/
}
