#ifndef EPTRIE_H
#define EPTRIE_H
/**********************************************************
数据结构：
Trie树,又称单词查找树或字典树,是一种树形结构,是一种哈希树的变种;

基本原理：
Trie树的核心思想是空间换时间,利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的;

应用：
用于统计和排序大量的字符串(但不仅限于字符串),所以经常被搜索引擎系统用于文本词频统计;

优点：
最大限度地减少无谓的字符串比较,查询效率比哈希表高;

基本特性：
(1)根节点不包含字符,除根节点外每一个节点都只包含一个字符;
(2)从根节点到某一节点,路径上经过的字符连接起来,为该节点对应的字符串;
(3)每个节点的所有子节点包含的字符都不相同;

节点的度：一个节点含有的子树的个数称为该节点的度；
树的度：一棵树中，最大的节点的度称为树的度；
叶节点或终端节点：度为零的节点；
非终端节点或分支节点：度不为零的节点；
父亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；
孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；
兄弟节点：具有相同父节点的节点互称为兄弟节点；
节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；
树的高度或深度：树中节点的最大层次；
堂兄弟节点：父节点在同一层的节点互为堂兄弟；
节点的祖先：从根到该节点所经分支上的所有节点；
子孙：以某节点为根的子树中任一节点都称为该节点的子孙。
森林：由m（m>=0）棵互不相交的树的集合称为森林；
***********************************************************/
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<climits>
#include<algorithm>
using namespace std;

const int MAX=26;

struct Trie //Trie结点声明
{
    bool isStr;//标记该结点处是否构成一个串
    Trie *next[MAX];//一个指针数组，存放着指向各个儿子节点的指针
};
void insert(Trie *root,const char *s); //将单词s插入到字典树中
int search(Trie *root,const char *s);//查找某个单词s是否已经存在
void del(Trie *root);               //释放整个字典树占的堆区空间

void showMain();
#endif // EPTRIE_H
